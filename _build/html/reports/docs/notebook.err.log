Traceback (most recent call last):
  File "/home/luka/miniconda3/lib/python3.12/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/home/luka/miniconda3/lib/python3.12/site-packages/nbclient/client.py", line 1314, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/luka/miniconda3/lib/python3.12/site-packages/jupyter_core/utils/__init__.py", line 165, in wrapped
    return loop.run_until_complete(inner)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/luka/miniconda3/lib/python3.12/asyncio/base_events.py", line 685, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File "/home/luka/miniconda3/lib/python3.12/site-packages/nbclient/client.py", line 709, in async_execute
    await self.async_execute_cell(
  File "/home/luka/miniconda3/lib/python3.12/site-packages/nbclient/client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/home/luka/miniconda3/lib/python3.12/site-packages/nbclient/client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
years = oe_df['year']
oil_production = oe_df['oil_prod']
number_of_disasters = oe_df['earthquake']

# Create the figure
fig = go.Figure()

# Add oil production line
fig.add_trace(go.Scatter(
    x=year,
    y=oil_production,
    mode='lines+markers',
    name='Olieproductie',
    yaxis='y1',
    line=dict(color='black'),
    marker=dict(color='black'),
    hovertemplate='Jaar: %{x}<br>Olieproductie: %{y}'
))

# Add number of disasters line
fig.add_trace(go.Scatter(
    x=years,
    y=number_of_disasters,
    mode='lines+markers',
    name='Number of Earthquakes',
    yaxis='y2',
    line=dict(color='#008000'),  # Using hex code for green
    marker=dict(color='#008000'),  # Using hex code for green
    hovertemplate='Year: %{x}<br>Number of Earthquakes: %{y}'
))

# Update layout for dual y-axis and legend at the bottom
fig.update_layout(
    title='Olieproductie en aantal aardbevingen door de jaren heen',
    xaxis=dict(title='Year'),
    yaxis=dict(
        title='Olieproductie',
        titlefont=dict(color='black'),
        tickfont=dict(color='black')
    ),
    yaxis2=dict(
        title='Aantal aardbevingen',
        titlefont=dict(color='#008000'),  # Using hex code for green
        tickfont=dict(color='#008000'),  # Using hex code for green
        overlaying='y',
        side='right'
    ),
    legend=dict(
        x=0.5,
        y=-0.2,
        orientation='h',
        xanchor='center',
        yanchor='top'
    )
)

# Show the figure
fig.show()
------------------


[0;31m---------------------------------------------------------------------------[0m
[0;31mValueError[0m                                Traceback (most recent call last)
Cell [0;32mIn[7], line 9[0m
[1;32m      6[0m fig [38;5;241m=[39m go[38;5;241m.[39mFigure()
[1;32m      8[0m [38;5;66;03m# Add oil production line[39;00m
[0;32m----> 9[0m fig[38;5;241m.[39madd_trace([43mgo[49m[38;5;241;43m.[39;49m[43mScatter[49m[43m([49m
[1;32m     10[0m [43m    [49m[43mx[49m[38;5;241;43m=[39;49m[43myear[49m[43m,[49m
[1;32m     11[0m [43m    [49m[43my[49m[38;5;241;43m=[39;49m[43moil_production[49m[43m,[49m
[1;32m     12[0m [43m    [49m[43mmode[49m[38;5;241;43m=[39;49m[38;5;124;43m'[39;49m[38;5;124;43mlines+markers[39;49m[38;5;124;43m'[39;49m[43m,[49m
[1;32m     13[0m [43m    [49m[43mname[49m[38;5;241;43m=[39;49m[38;5;124;43m'[39;49m[38;5;124;43mOlieproductie[39;49m[38;5;124;43m'[39;49m[43m,[49m
[1;32m     14[0m [43m    [49m[43myaxis[49m[38;5;241;43m=[39;49m[38;5;124;43m'[39;49m[38;5;124;43my1[39;49m[38;5;124;43m'[39;49m[43m,[49m
[1;32m     15[0m [43m    [49m[43mline[49m[38;5;241;43m=[39;49m[38;5;28;43mdict[39;49m[43m([49m[43mcolor[49m[38;5;241;43m=[39;49m[38;5;124;43m'[39;49m[38;5;124;43mblack[39;49m[38;5;124;43m'[39;49m[43m)[49m[43m,[49m
[1;32m     16[0m [43m    [49m[43mmarker[49m[38;5;241;43m=[39;49m[38;5;28;43mdict[39;49m[43m([49m[43mcolor[49m[38;5;241;43m=[39;49m[38;5;124;43m'[39;49m[38;5;124;43mblack[39;49m[38;5;124;43m'[39;49m[43m)[49m[43m,[49m
[1;32m     17[0m [43m    [49m[43mhovertemplate[49m[38;5;241;43m=[39;49m[38;5;124;43m'[39;49m[38;5;124;43mJaar: [39;49m[38;5;124;43m%[39;49m[38;5;132;43;01m{x}[39;49;00m[38;5;124;43m<br>Olieproductie: [39;49m[38;5;124;43m%[39;49m[38;5;132;43;01m{y}[39;49;00m[38;5;124;43m'[39;49m
[1;32m     18[0m [43m)[49m)
[1;32m     20[0m [38;5;66;03m# Add number of disasters line[39;00m
[1;32m     21[0m fig[38;5;241m.[39madd_trace(go[38;5;241m.[39mScatter(
[1;32m     22[0m     x[38;5;241m=[39myears,
[1;32m     23[0m     y[38;5;241m=[39mnumber_of_disasters,
[0;32m   (...)[0m
[1;32m     29[0m     hovertemplate[38;5;241m=[39m[38;5;124m'[39m[38;5;124mYear: [39m[38;5;124m%[39m[38;5;132;01m{x}[39;00m[38;5;124m<br>Number of Earthquakes: [39m[38;5;124m%[39m[38;5;132;01m{y}[39;00m[38;5;124m'[39m
[1;32m     30[0m ))

File [0;32m~/miniconda3/lib/python3.12/site-packages/plotly/graph_objs/_scatter.py:3486[0m, in [0;36mScatter.__init__[0;34m(self, arg, alignmentgroup, cliponaxis, connectgaps, customdata, customdatasrc, dx, dy, error_x, error_y, fill, fillcolor, fillpattern, groupnorm, hoverinfo, hoverinfosrc, hoverlabel, hoveron, hovertemplate, hovertemplatesrc, hovertext, hovertextsrc, ids, idssrc, legend, legendgroup, legendgrouptitle, legendrank, legendwidth, line, marker, meta, metasrc, mode, name, offsetgroup, opacity, orientation, selected, selectedpoints, showlegend, stackgaps, stackgroup, stream, text, textfont, textposition, textpositionsrc, textsrc, texttemplate, texttemplatesrc, uid, uirevision, unselected, visible, x, x0, xaxis, xcalendar, xhoverformat, xperiod, xperiod0, xperiodalignment, xsrc, y, y0, yaxis, ycalendar, yhoverformat, yperiod, yperiod0, yperiodalignment, ysrc, **kwargs)[0m
[1;32m   3484[0m _v [38;5;241m=[39m x [38;5;28;01mif[39;00m x [38;5;129;01mis[39;00m [38;5;129;01mnot[39;00m [38;5;28;01mNone[39;00m [38;5;28;01melse[39;00m _v
[1;32m   3485[0m [38;5;28;01mif[39;00m _v [38;5;129;01mis[39;00m [38;5;129;01mnot[39;00m [38;5;28;01mNone[39;00m:
[0;32m-> 3486[0m     [38;5;28;43mself[39;49m[43m[[49m[38;5;124;43m"[39;49m[38;5;124;43mx[39;49m[38;5;124;43m"[39;49m[43m][49m [38;5;241m=[39m _v
[1;32m   3487[0m _v [38;5;241m=[39m arg[38;5;241m.[39mpop([38;5;124m"[39m[38;5;124mx0[39m[38;5;124m"[39m, [38;5;28;01mNone[39;00m)
[1;32m   3488[0m _v [38;5;241m=[39m x0 [38;5;28;01mif[39;00m x0 [38;5;129;01mis[39;00m [38;5;129;01mnot[39;00m [38;5;28;01mNone[39;00m [38;5;28;01melse[39;00m _v

File [0;32m~/miniconda3/lib/python3.12/site-packages/plotly/basedatatypes.py:4874[0m, in [0;36mBasePlotlyType.__setitem__[0;34m(self, prop, value)[0m
[1;32m   4870[0m         [38;5;28mself[39m[38;5;241m.[39m_set_array_prop(prop, value)
[1;32m   4872[0m     [38;5;66;03m# ### Handle simple property ###[39;00m
[1;32m   4873[0m     [38;5;28;01melse[39;00m:
[0;32m-> 4874[0m         [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43m_set_prop[49m[43m([49m[43mprop[49m[43m,[49m[43m [49m[43mvalue[49m[43m)[49m
[1;32m   4875[0m [38;5;28;01melse[39;00m:
[1;32m   4876[0m     [38;5;66;03m# Make sure properties dict is initialized[39;00m
[1;32m   4877[0m     [38;5;28mself[39m[38;5;241m.[39m_init_props()

File [0;32m~/miniconda3/lib/python3.12/site-packages/plotly/basedatatypes.py:5218[0m, in [0;36mBasePlotlyType._set_prop[0;34m(self, prop, val)[0m
[1;32m   5216[0m         [38;5;28;01mreturn[39;00m
[1;32m   5217[0m     [38;5;28;01melse[39;00m:
[0;32m-> 5218[0m         [38;5;28;01mraise[39;00m err
[1;32m   5220[0m [38;5;66;03m# val is None[39;00m
[1;32m   5221[0m [38;5;66;03m# -----------[39;00m
[1;32m   5222[0m [38;5;28;01mif[39;00m val [38;5;129;01mis[39;00m [38;5;28;01mNone[39;00m:
[1;32m   5223[0m     [38;5;66;03m# Check if we should send null update[39;00m

File [0;32m~/miniconda3/lib/python3.12/site-packages/plotly/basedatatypes.py:5213[0m, in [0;36mBasePlotlyType._set_prop[0;34m(self, prop, val)[0m
[1;32m   5210[0m validator [38;5;241m=[39m [38;5;28mself[39m[38;5;241m.[39m_get_validator(prop)
[1;32m   5212[0m [38;5;28;01mtry[39;00m:
[0;32m-> 5213[0m     val [38;5;241m=[39m [43mvalidator[49m[38;5;241;43m.[39;49m[43mvalidate_coerce[49m[43m([49m[43mval[49m[43m)[49m
[1;32m   5214[0m [38;5;28;01mexcept[39;00m [38;5;167;01mValueError[39;00m [38;5;28;01mas[39;00m err:
[1;32m   5215[0m     [38;5;28;01mif[39;00m [38;5;28mself[39m[38;5;241m.[39m_skip_invalid:

File [0;32m~/miniconda3/lib/python3.12/site-packages/_plotly_utils/basevalidators.py:412[0m, in [0;36mDataArrayValidator.validate_coerce[0;34m(self, v)[0m
[1;32m    410[0m     v [38;5;241m=[39m to_scalar_or_list(v)
[1;32m    411[0m [38;5;28;01melse[39;00m:
[0;32m--> 412[0m     [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43mraise_invalid_val[49m[43m([49m[43mv[49m[43m)[49m
[1;32m    413[0m [38;5;28;01mreturn[39;00m v

File [0;32m~/miniconda3/lib/python3.12/site-packages/_plotly_utils/basevalidators.py:296[0m, in [0;36mBaseValidator.raise_invalid_val[0;34m(self, v, inds)[0m
[1;32m    293[0m             [38;5;28;01mfor[39;00m i [38;5;129;01min[39;00m inds:
[1;32m    294[0m                 name [38;5;241m+[39m[38;5;241m=[39m [38;5;124m"[39m[38;5;124m[[39m[38;5;124m"[39m [38;5;241m+[39m [38;5;28mstr[39m(i) [38;5;241m+[39m [38;5;124m"[39m[38;5;124m][39m[38;5;124m"[39m
[0;32m--> 296[0m         [38;5;28;01mraise[39;00m [38;5;167;01mValueError[39;00m(
[1;32m    297[0m [38;5;250m            [39m[38;5;124;03m"""[39;00m
[1;32m    298[0m [38;5;124;03m    Invalid value of type {typ} received for the '{name}' property of {pname}[39;00m
[1;32m    299[0m [38;5;124;03m        Received value: {v}[39;00m
[1;32m    300[0m 
[1;32m    301[0m [38;5;124;03m{valid_clr_desc}"""[39;00m[38;5;241m.[39mformat(
[1;32m    302[0m                 name[38;5;241m=[39mname,
[1;32m    303[0m                 pname[38;5;241m=[39m[38;5;28mself[39m[38;5;241m.[39mparent_name,
[1;32m    304[0m                 typ[38;5;241m=[39mtype_str(v),
[1;32m    305[0m                 v[38;5;241m=[39m[38;5;28mrepr[39m(v),
[1;32m    306[0m                 valid_clr_desc[38;5;241m=[39m[38;5;28mself[39m[38;5;241m.[39mdescription(),
[1;32m    307[0m             )
[1;32m    308[0m         )

[0;31mValueError[0m: 
    Invalid value of type 'numpy.int64' received for the 'x' property of scatter
        Received value: 2022

    The 'x' property is an array that may be specified as a tuple,
    list, numpy array, or pandas Series

