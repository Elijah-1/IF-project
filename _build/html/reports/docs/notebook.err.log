Traceback (most recent call last):
  File "/home/luka/miniconda3/lib/python3.12/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/home/luka/miniconda3/lib/python3.12/site-packages/nbclient/client.py", line 1314, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/luka/miniconda3/lib/python3.12/site-packages/jupyter_core/utils/__init__.py", line 165, in wrapped
    return loop.run_until_complete(inner)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/luka/miniconda3/lib/python3.12/asyncio/base_events.py", line 685, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File "/home/luka/miniconda3/lib/python3.12/site-packages/nbclient/client.py", line 709, in async_execute
    await self.async_execute_cell(
  File "/home/luka/miniconda3/lib/python3.12/site-packages/nbclient/client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/home/luka/miniconda3/lib/python3.12/site-packages/nbclient/client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
years = nd_ex_df['Year'].unique()
years.sort()

# Get disaster counts for all years
disaster_counts_all_years = nd_ex_df.groupby('Entity')['Disasters'].sum().reset_index()

# Function to get disaster counts for a specific year
def get_disaster_counts(year):
    return nd_ex_df[nd_ex_df['Year'] == year].groupby('Entity')['Disasters'].sum().reset_index()

# Create the initial pie chart with all years
fig_pie = go.Figure()

fig_pie.add_trace(go.Pie(
    labels=disaster_counts_all_years['Entity'],
    values=disaster_counts_all_years['Disasters'],
    hole=0.8,
    marker=dict(colors=[color_map[disaster] for disaster in disaster_counts_all_years['Entity']]),
    textposition='outside',
    textinfo='percent'
))

# Create frames for each year
frames = []
for year in years:
    counts = get_disaster_counts(year)
    frames.append(go.Frame(
        data=[go.Pie(
            labels=counts['Entity'],
            values=counts['Disasters'],
            hole=0.8,
            marker=dict(colors=[color_map[disaster] for disaster in counts['Entity']]),
            textposition='outside',
            textinfo='percent'
        )],
        name=str(year)
    ))

# Add an "All years" frame
frames.append(go.Frame(
    data=[go.Pie(
        labels=disaster_counts_all_years['Entity'],
        values=disaster_counts_all_years['Disasters'],
        hole=0.8,
        marker=dict(colors=[color_map[disaster] for disaster in disaster_counts_all_years['Entity']]),
        textposition='outside',
        textinfo='percent'
    )],
    name='All years'
))

# Update layout with slider
fig_pie.update_layout(
    title_text='Frequency of Different Disasters',
    updatemenus=[{
        'buttons': [{
            'args': [None, {'frame': {'duration': 500, 'redraw': True}, 'fromcurrent': True}],
            'label': 'Play',
            'method': 'animate'
        }, {
            'args': [[None], {'frame': {'duration': 0, 'redraw': True}, 'mode': 'immediate', 'transition': {'duration': 0}}],
            'label': 'Pause',
            'method': 'animate'
        }],
        'direction': 'left',
        'pad': {'r': 10, 't': 87},
        'showactive': False,
        'type': 'buttons',
        'x': 0.1,
        'xanchor': 'right',
        'y': 0,
        'yanchor': 'top'
    }],
    sliders=[{
        'active': len(years),
        'yanchor': 'top',
        'xanchor': 'left',
        'currentvalue': {
            'font': {'size': 20},
            'prefix': 'Year: ',
            'visible': True,
            'xanchor': 'right'
        },
        'transition': {'duration': 300, 'easing': 'cubic-in-out'},
        'pad': {'b': 10, 't': 50},
        'len': 0.9,
        'x': 0.1,
        'y': 0,
        'steps': [{
            'args': [[str(year)], {'frame': {'duration': 300, 'redraw': True}, 'mode': 'immediate', 'transition': {'duration': 300}}],
            'label': str(year),
            'method': 'animate'
        } for year in years] + [{
            'args': [['All years'], {'frame': {'duration': 300, 'redraw': True}, 'mode': 'immediate', 'transition': {'duration': 300}}],
            'label': 'All years',
            'method': 'animate'
        }]
    }],
    'height': 600
)

fig_pie.frames = frames

# Show the plot
fig_pie.show()
------------------


[0;36m  Cell [0;32mIn[3], line 99[0;36m[0m
[0;31m    'height': 600[0m
[0m            ^[0m
[0;31mSyntaxError[0m[0;31m:[0m positional argument follows keyword argument


